name: Deploy to GitHub Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

# Set environment variables for consistent builds
env:
  NODE_ENV: production
  NEXT_TELEMETRY_DISABLED: 1

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: next

      - name: Restore Next.js cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Clean and install dependencies
        run: |
          echo "Cleaning any existing artifacts..."
          rm -rf .next out node_modules/.cache
          echo "Installing all dependencies (including TypeScript for build)..."
          npm install --prefer-offline --no-audit
          echo "Dependencies installed successfully"
          echo ""
          echo "Verifying TypeScript installation:"
          npm ls typescript @types/react @types/node @types/react-dom
          npx tsc --version

      - name: Verify project structure and dependencies
        run: |
          echo "=== Environment Information ==="
          echo "Node.js version: $(node --version)"
          echo "npm version: $(npm --version)"
          echo "Working directory: $(pwd)"
          echo ""
          echo "=== Project Structure ==="
          echo "Checking src structure:"
          find src -type f -name "*.tsx" -o -name "*.ts" | head -20
          echo ""
          echo "=== TypeScript Configuration ==="
          echo "tsconfig.json exists: $(test -f tsconfig.json && echo 'YES' || echo 'NO')"
          if [ -f tsconfig.json ]; then
            echo "Path aliases in tsconfig.json:"
            cat tsconfig.json | grep -A 5 '"paths"' || echo "No paths found"
          fi
          echo ""
          echo "=== Checking Dependencies ==="
          npm ls typescript @types/react @types/node @types/react-dom tailwindcss || echo "Some packages not found, continuing..."
          echo ""
          echo "=== Module Resolution Test ==="
          echo "Testing if components can be resolved:"
          ls -la src/components/ || echo "Components directory not found"

      - name: Pre-build checks
        run: |
          echo "=== Running pre-build checks ==="
          echo "1. TypeScript compilation check:"
          npm run type-check || echo "Type check failed, but continuing..."
          echo ""
          echo "2. ESLint check:"
          npm run lint || echo "Lint failed, but continuing..."
          echo ""
          echo "3. Testing module resolution:"
          node -e "
            try {
              const path = require('path');
              const fs = require('fs');
              const tsConfig = JSON.parse(fs.readFileSync('tsconfig.json', 'utf8'));
              console.log('TypeScript config paths:', JSON.stringify(tsConfig.compilerOptions.paths, null, 2));

              // Test if components exist
              const componentsPath = path.join(process.cwd(), 'src', 'components');
              const files = fs.readdirSync(componentsPath);
              console.log('Components found:', files);

              // Test specific file
              const gradientGridPath = path.join(componentsPath, 'GradientGrid.tsx');
              console.log('GradientGrid.tsx exists:', fs.existsSync(gradientGridPath));
            } catch (error) {
              console.error('Module resolution test failed:', error.message);
            }
          "

      - name: Build Next.js application (includes type checking and linting)
        run: |
          echo "Starting Next.js build..."
          npm run build
          echo "Build completed successfully"

      - name: Verify build output
        run: |
          ls -la out/
          echo "Build output verified"

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out
          name: github-pages
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages

      - name: Verify deployment
        run: |
          echo "Deployment completed successfully"
          echo "Site URL: ${{ steps.deployment.outputs.page_url }}"
